#BlueJ class context
comment0.target=Picture
comment0.text=\r\n\ A\ class\ that\ represents\ a\ picture.\ \ This\ class\ inherits\ from\ \r\n\ SimplePicture\ and\ allows\ the\ student\ to\ add\ functionality\ to\r\n\ the\ Picture\ class.\ \ \r\n\ \r\n\ @author\ Barbara\ Ericson\ ericson@cc.gatech.edu\r\n
comment1.params=
comment1.target=Picture()
comment1.text=\r\n\ Constructor\ that\ takes\ no\ arguments\ \r\n
comment10.params=
comment10.target=void\ keepOnlyRed()
comment11.params=
comment11.target=void\ negate()
comment12.params=
comment12.target=void\ grayscale()
comment13.params=
comment13.target=void\ invert()
comment14.params=amount
comment14.target=void\ darken(int)
comment15.params=
comment15.target=void\ fixUnderwater()
comment15.text=\r\n\ Method\ to\ fix\ the\ fish\r\n\ Takes\ a\ sample\ and\ adjust\ the\ image\r\n\ to\ better\ see\ the\ fish\r\n
comment16.params=
comment16.target=void\ mirrorVertical()
comment16.text=\ Method\ that\ mirrors\ the\ picture\ around\ a\ \r\n\ vertical\ mirror\ in\ the\ center\ of\ the\ picture\r\nfrom\ left\ to\ right
comment17.params=
comment17.target=void\ mirrorVerticalRightToLeft()
comment18.params=
comment18.target=void\ mirrorHorizontal()
comment19.params=
comment19.target=void\ mirrorHorizontalBottomToTop()
comment2.params=fileName
comment2.target=Picture(java.lang.String)
comment2.text=\r\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\ \r\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\r\n
comment20.params=
comment20.target=void\ mirrorDiagonal()
comment21.params=
comment21.target=void\ mirrorTemple()
comment21.text=Mirror\ just\ part\ of\ a\ picture\ of\ a\ temple
comment22.params=
comment22.target=void\ mirrorArms()
comment22.text=Mirrors\ the\ arms\ of\ the\ snowman
comment23.params=
comment23.target=void\ mirrorGull()
comment24.params=fromPic\ startRow\ startCol
comment24.target=void\ copy(Picture,\ int,\ int)
comment24.text=\ copy\ from\ the\ passed\ fromPic\ to\ the\r\n\ specified\ startRow\ and\ startCol\ in\ the\r\n\ current\ picture\r\n\ @param\ fromPic\ the\ picture\ to\ copy\ from\r\n\ @param\ startRow\ the\ start\ row\ to\ copy\ to\r\n\ @param\ startCol\ the\ start\ col\ to\ copy\ to\r\n
comment25.params=fromPic\ startRow\ endRow\ startCol\ endCol
comment25.target=void\ copy2(Picture,\ int,\ int,\ int,\ int)
comment26.params=
comment26.target=void\ createCollage()
comment26.text=Method\ to\ create\ a\ collage\ of\ several\ pictures
comment27.params=
comment27.target=void\ myCollage()
comment28.params=edgeDist
comment28.target=void\ edgeDetection(int)
comment28.text=\ Method\ to\ show\ large\ changes\ in\ color\ \r\n\ @param\ edgeDist\ the\ distance\ for\ finding\ edges\r\n
comment29.params=edgeDist
comment29.target=void\ edgeDetection2(int)
comment29.text=\r\n\ Method\ for\ edge\ detection,\ my\ way.\r\n\ Handy\ methods\ used\ in\ this\ method\ are\ below.\r\n\ \r\n\ \r\n\ \r\n
comment3.params=height\ width
comment3.target=Picture(int,\ int)
comment3.text=\r\n\ Constructor\ that\ takes\ the\ width\ and\ height\r\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\r\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\r\n
comment30.params=testColor1\ testColor2
comment30.target=double\ colorDistance(java.awt.Color,\ java.awt.Color)
comment31.params=myColors
comment31.target=java.awt.Color\ getAverageColor(java.awt.Color[])
comment32.params=pixels
comment32.target=java.awt.Color[]\ getPixelColors(java.util.ArrayList)
comment33.params=pixels\ startRow\ startCol\ width\ height
comment33.target=Pixel[][]\ getPixelCluster(Pixel[][],\ int,\ int,\ int,\ int)
comment34.params=fullArray\ angle\ typeOf
comment34.target=java.util.ArrayList\ getPartialArrayLine(Pixel[][],\ double,\ int)
comment34.text=\r\n\ Method\ getPartialArray\ takes\ an\ array\ of\ pixels,\r\n\ an\ angle\ to\ divide\ the\ array,\ and\ the\ "type\ of"\ that\r\n\ determines\ whether\ it\ returns\ the\ top/right\ (0)\ or\r\n\ the\ bottom/left\ (1)\r\n\ \r\n\ This\ one\ only\ takes\ the\ elements\ that\ lie\ on\ the\ line\ of\ division\r\n\ \r\n\ Need\ to\ update\ this\ method\ to\ match\ the\ one\ below\ ********\r\n\ \r\n\ @param\ pixels\ \r\n\ @param\ angle\ the\ angle\ to\ divide,\ given\ in\ radians\ (0\ to\ pi)\r\n
comment35.params=fullArray\ angle\ typeOf
comment35.target=java.util.ArrayList\ getPartialArray(Pixel[][],\ double,\ int)
comment35.text=\r\n\ Method\ getPartialArray\ takes\ an\ array\ of\ pixels,\r\n\ an\ angle\ to\ divide\ the\ array,\ and\ the\ "type\ of"\ that\r\n\ determines\ whether\ it\ returns\ the\ top/right\ (0)\ or\r\n\ the\ bottom/left\ (1)\r\n\ \r\n\ Need\ to\ update\ this\ method\ to\ match\ the\ one\ below\ ********\r\n\ \r\n\ @param\ pixels\ \r\n\ @param\ angle\ the\ angle\ to\ divide,\ given\ in\ radians\ (0\ to\ pi)\r\n
comment36.params=fullArray\ angle\ typeOf
comment36.target=java.util.ArrayList\ getPartialArray(int[][],\ double,\ int)
comment37.params=args
comment37.target=void\ main(java.lang.String[])
comment37.text=\ Main\ method\ for\ testing\ -\ each\ class\ in\ Java\ can\ have\ a\ main\ \r\n\ method\ \r\n
comment4.params=copyPicture
comment4.target=Picture(Picture)
comment4.text=\r\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\ \r\n\ copy\ of\ that\ picture\r\n\ @param\ copyPicture\ the\ picture\ to\ copy\r\n
comment5.params=image
comment5.target=Picture(java.awt.image.BufferedImage)
comment5.text=\r\n\ Constructor\ that\ takes\ a\ buffered\ image\r\n\ @param\ image\ the\ buffered\ image\ to\ use\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Method\ to\ return\ a\ string\ with\ information\ about\ this\ picture.\r\n\ @return\ a\ string\ with\ information\ about\ the\ picture\ such\ as\ fileName,\r\n\ height\ and\ width.\r\n
comment7.params=
comment7.target=void\ zeroBlue()
comment7.text=Method\ to\ set\ the\ blue\ to\ 0
comment8.params=
comment8.target=void\ keepOnlyBlue()
comment9.params=
comment9.target=void\ keepOnlyGreen()
numComments=38
